[非终结符]
Hao
packageheader
functions
function
Args
Typelist
declarations
declaration
Varlist
Type
Define
Array
muilType
sentens
senten
Assign
left
lvalue
right
E
T
F
constant
M
N
B
relop
global
[终结符]
package
string
fid
fn
var
int double string byte bool
id
digits real
semic 
[ ] { } ( ) ,
if else
and or not true false 
!= == <= >= < > =
+ - * /
for
return
while
[文法起始符]
Hao'

[生成式]

Hao' => Hao;

Hao => packageheader
        declarations
		functions;

packageheader => package id;

functions => functions function;
functions => ;


function => fn fid ( Args ) Typelist { declarations  sentens };
function => fn fid ( Args ) { declarations  sentens };
declarations => declarations  declaration;
declarations => ;
declaration => var Define semic;
Define => Define , Varlist muilType;
Define => Varlist muilType;

Type => int;
Type => double;
Type => bool;
Type => byte; 
Type => string; 

Varlist => Varlist , id;
Varlist => id;

muilType => Array Type;

Array => [ digits ] | ;

Args => Args , Varlist muilType;
Args => Varlist muilType;
Args => ;

Typelist => muilType;
Typelist => Typelist , muilType;


sentens => sentens M senten;
sentens => ;
senten => Assign semic;

Assign => left = right;
left => left , lvalue;
left => lvalue;
lvalue => id | 
		id [ digits ] |
		id [ id ];

right => right , E;
right => E;

E => E + T;
E => E - T;
E => T;
T => T * F;
T => T / F;
T => F;
F => ( E );
F => constant;
F => lvalue;
constant => digits | real;

senten => if B { M  sentens };
senten => if B { M sentens  } N else { M  sentens };

B => ( B or M B );
B => ( B and M B );
B => not B;
B => ( B );
B => E relop E;
B => true;
B => false;
relop => != | == | <= | >= | < | >;

senten => for Assign semic B semic Assign { M sentens };
senten => for semic semic { M sentens };
senten => for semic B semic { M sentens };
senten => for Assign semic B semic { M sentens };
senten => for semic B semic Assign { M sentens };
senten => while M B { M sentens };
senten => return E semic;

M => ;
N => ;


